# This is a basic workflow to help you get started with Actions

name: "Build production"

# Controls when the workflow will run
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: "Checkout Source Code"
        uses: actions/checkout@v5
      - name: "Setup Node.js environment"
        uses: actions/setup-node@v4.4.0
        with:
          node-version-file: .nvmrc
      - name: Caching Gatsby
        id: gatsby-cache-build
        uses: actions/cache@v3
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-gatsby-build-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-gatsby-build-
      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2
        with:
          envkey_GATSBY_GTM_ID: ${{ secrets.GATSBY_GTM_ID }}
          envkey_BRANCH: "master"
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          environment: production
          initial_status: queued

      # Runs a set of commands using the runners shell
      - name: "Build the website (production build)"
        run: |
          yarn install --production
          yarn run build
      - name: "Deploy to netlify server"
        uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        with:
          args: deploy --dir=public --prod
          secrets: '["NETLIFY_AUTH_TOKEN", "NETLIFY_SITE_ID"]'
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: ${{ steps.deploy_preview.outputs.NETLIFY_URL }}
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          environment_url: ${{ steps.deploy_preview.outputs.NETLIFY_LIVE_URL }}
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
